<?php

class Tpl {

  // Input (char, state, buffer_state)
  // Output (next_state, output_code, buffer_state)

  // All template input is considered to be text we concatenate to output.
  // This is the starting state for the machine
  const STATE_IN_FREE_TEXT = 0;

  // Error in the template syntax has occured.
  const STATE_INVALID = 1;

  // Expecting a loop or if clause.
  const STATE_CLAUSE = 2;

  // Expecting a left paren for condition.
  const STATE_EXPECT_CONDITION = 3;

  // Expecting definition of the loop scope.
  const STATE_EXPECT_LOOP_SCOPE = 4;

  // Expecting the body char '{'.
  const STATE_EXPECT_BODY = 5;

  // In loop, if or else body.
  const STATE_IN_BODY = 6;

  // The current state of the machine.
  private $state;

  // Determines wheter we should buffer the chars in the template.
  private $buffer_state;

  // Current value of the buffer.
  private $buffer;

  // Current char index of the template.
  private $char_index;

  // Code generated by the template.
  private $code;

  // The input template to be compiled.
  private $template;

  // Maps the transitions.
  // first element matches (input_char, current_state)
  private $transitions = array(
    array(
      array('$', Tpl::STATE_IN_FREE_TEXT),
      array('state' => Tpl::STATE_CLAUSE,
            'collect' => false)
    ),
    array(
      array('?', Tpl::STATE_CLAUSE),
      array('state' => Tpl::STATE_EXPECT_CONDITION,
            'collect' => false)
    ),
    array(
      array('(', Tpl::STATE_CLAUSE),
      array('state' => Tpl::STATE_EXPECT_LOOP_SCOPE,
            'collect' => false)
    ),
    array(
      array(')', Tpl::STATE_EXPECT_LOOP_SCOPE),
      array('state' => Tpl::STATE_EXPECT_BODY,
            'collect' => false,
            'code' => 'foreach (__scope__ as __key__ => __value__ )')
    ),
    array(
      array('{', TPL::STATE_EXPECT_BODY),
      array('state' => Tpl::STATE_IN_BODY,
            'collect' => false),
    )
  );

  public function __construct() {}

  private function reset($template) {
    $this->state = Tpl::STATE_IN_FREE_TEXT;
    $this->buffer_state = true;
    $this->char_index = 0;
    $this->buffer = "";
    $this->template = $template;
    $this->code = "";
  }

  // Read single template char, increment internal index by 1.
  // Returns null when passed the template length.
  private function read() {
    if ($this->char_index >= strlen($this->template))
      return null;

    $char = $this->template[$this->char_index];
    $this->char_index++;

    return $char;
  }

  public function compile($template, $pretty = false) {
    $this->reset($template);

    while (($char = $this->read()) !== null) {
      list($next_state, $output_code, $next_buffer_state) =
        $this->transit($char, $this->state, $this->buffer_state);

      $this->state = $next_state;
      $this->buffer_state = $next_buffer_state;
      $this->output_code .= $output_code;

      if ($this->buffer_state)
        $this->buffer .= $char;
    }
  }

  private function transit($input_char, $state, $buffer_state) {

  }


}

echo "Hello";
