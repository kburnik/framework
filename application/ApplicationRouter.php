<?abstract class ApplicationRouter {		protected $routes;		public abstract function getViewProvider( $viewModelClassName );		public function __construct( $routes ) 	{		$this->routes = $routes;	}		public function route( $url , $templateViewFilename , $notFoundViewFilename ) 	{					$viewModel = $this->getViewModelForRoute( $url );							if ( $viewModel instanceOf View )		{			return produceview( $templateViewFilename,  $viewModel );		} 		else 		{			header('HTTP/1.1 404 Not Found');			return produceview( $notFoundViewFilename , array( "url" => $url ) );		}		}			private function getViewModelForRoute( $url )	{			$routes = $this->routes;						$viewModelMatched = false;				if ( array_key_exists( $url , $routes ) ) 		{					$viewModelMatched = true;						list( $viewModelClassName , $viewModelParams ) = $routes[ $url ];							} 		else 		{								foreach ( $routes as $pattern => $routeInstructions ) 					{							list( $className , $viewModelParams , $matchMapping ) = $routeInstructions;												if ( @preg_match(  "/{$pattern}/"  , $url , $matchResults ) ) 				{									foreach ( $matchMapping as $varName => $index )					{											$viewModelParams[ $varName ] = $matchResults[ $index ];										}										/*					print_r( array(						matched => $className,						url => $url,						pattern => $pattern,						matchMapping => $matchMapping,						matchResults => $matchResults,						viewModelParams => $viewModelParams					));					*/										$viewModelClassName = $className;										$viewModelMatched = true;										break;									}									}							}								if ( $viewModelMatched )		{							$viewProvider = $this->getViewProvider( $viewModelClassName );												$viewModel = 				new $viewModelClassName				( 					null					, 					$viewModelParams					,					$viewProvider									);						return $viewModel;						}				return null;				}}?>