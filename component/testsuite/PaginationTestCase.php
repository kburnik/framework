<?class PaginationTestCase extends TestCase{	protected $pagination;	public function __construct()	{		$this->pagination = new Pagination();				$this			->pagination			->setPagePointerRange( 4 )			->setItemCount( 107 )			->setItemLimit( 10 )		;			}			public function getItemCount_with107ItemsSetInTestConstructor_returns107()	{		$itemCount = $this->pagination->getItemCount();				$this->assertEqual( 107, $itemCount );		}			public function getItemStartAndLimit_bySettingPageNumber3_returnStart20Limit10Number10()	{				$this->pagination->setPageNumber( 3 );				$itemStart = $this->pagination->getItemStart();		$itemLimit = $this->pagination->getItemLimit();		$itemNumber = $this->pagination->getItemNumber();				$this->assertEqual( array( 20, 10 ) , array( $itemStart , $itemLimit ) );		}			public function getItemSlice_bySettingPageNumber3_returnStart20Limit10Number10()	{		$this->pagination->setPageNumber( 3 );				$itemSlice = $this->pagination->getItemSlice();						$this->assertEqual( array( 20, 10, 10 ) , $itemSlice );	}			public function getItemSlice_bySettingPageNumber11_returnStart100Limit10Number8()	{		$this->pagination->setPageNumber( 11 );				$itemSlice = $this->pagination->getItemSlice();						$this->assertEqual( array( 100, 10, 8 ) , $itemSlice );	}		public function getPageCount_with107itemsSetInTestConstructor_returns11()	{		$pageCount = $this->pagination->getPageCount();				$this->assertEqual( 11 , $pageCount );	}			public function getItemSlice_bySettingPageNumber12_returnStart100Limit10Number8()	{		$this->pagination->setPageNumber( 12 );				$itemSlice = $this->pagination->getItemSlice();						$this->assertEqual( array( 100, 10 , 8 ) , $itemSlice );	}		public function getPageNumber_bySettingPageNumber1_returns1()	{		$this->pagination->setPageNumber( 1 );				$pageNumber = $this->pagination->getPageNumber();				$this->assertEqual( 1 , $pageNumber );		}		public function getPageNumber_bySettingPageNumber7_returns7()	{		$this->pagination->setPageNumber( 7 );				$pageNumber = $this->pagination->getpageNumber();				$this->assertEqual( 7 , $pageNumber );		}		public function getPageNumber_bySettingPageNumber10_returns10()	{		$this->pagination->setPageNumber( 10 );				$pageNumber = $this->pagination->getpageNumber();				$this->assertEqual( 10 , $pageNumber );		}			public function getPageNumber_bySettingPageNumber13_returns11()	{		$this->pagination->setPageNumber( 13 );				$pageNumber = $this->pagination->getpageNumber();				$this->assertEqual( 11 , $pageNumber );		}			public function getPageNumber_bySettingPageNumberNegative2_returns1()	{		$this->pagination->setPageNumber( -2 );				$pageNumber = $this->pagination->getpageNumber();				$this->assertEqual( 1 , $pageNumber );		}			public function testChaining() 	{			$res = $this->pagination					->setPagePointerRange( 10 )					->setItemCount( 5 )					->setItemLimit( 2 )					->setPageNumber( 1 );				$this->assertEqual( $this->pagination , $res );	}			protected function __assertEqualPointers( $expected, $measured )	{			foreach ( $expected as $var => $val )		{								$this->assertEqual( array( $var , $expected[ $var ]) , array( $var , $measured[ $var ] )  );				}		}			public function getPagePointers_onPage1WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 1 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(),				'first' => array(),				'lsep' => false,				'left' => array(),				'current' => array(1),				'right' => array(2,3,4,5),				'rsep' => true,				'last' => array(11),				'next' => array(2)			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}		public function getPagePointers_onPage2WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 2 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(1),				'first' => array(1),				'lsep' => false,				'left' => array(),				'current' => array(2),				'right' => array(3,4,5),				'rsep' => true,				'last' => array(11),				'next' => array(3)			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}		public function getPagePointers_onPage3WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 3 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(2),				'first' => array(1),				'lsep' => false,				'left' => array(2),				'current' => array(3),				'right' => array(4,5),				'rsep' => true,				'last' => array(11),				'next' => array(4)			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}			public function getPagePointers_onPage4WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 4 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(3),				'first' => array(1),				'lsep' => false,				'left' => array(2,3),				'current' => array(4),				'right' => array(5,6),				'rsep' => true,				'last' => array(11),				'next' => array(5)			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}			public function getPagePointers_onPage5WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 5 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(4),				'first' => array(1),				'lsep' => true,				'left' => array(3,4),				'current' => array(5),				'right' => array(6,7),				'rsep' => true,				'last' => array(11),				'next' => array(6)			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}		public function getPagePointers_onPage8WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 8 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(7),				'first' => array(1),				'lsep' => true,				'left' => array(6,7),				'current' => array(8),				'right' => array(9,10),				'rsep' => false,				'last' => array(11),				'next' => array(9)			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}		public function getPagePointers_onPage9WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 9 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(8),				'first' => array(1),				'lsep' => true,				'left' => array(7,8),				'current' => array(9),				'right' => array(10),				'rsep' => false,				'last' => array(11),				'next' => array(10)			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}			public function getPagePointers_onPage10WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 10 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(9),				'first' => array(1),				'lsep' => true,				'left' => array(7,8,9),				'current' => array(10),				'right' => array(),				'rsep' => false,				'last' => array(11),				'next' => array(11)			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}		public function getPagePointers_onPage11WithPagePointerRange5_returnsValidPointers()	{					$pointers = $this						->pagination						->setPageNumber( 11 )						->setPagePointerRange( 5 )						->getPagePointers();				$expectedPointers =			array(				'previous' => array(10),				'first' => array(1),				'lsep' => true,				'left' => array(7,8,9,10),				'current' => array(11),				'right' => array(),				'rsep' => false,				'last' => array(),				'next' => array()			);					$this->__assertEqualPointers( $expectedPointers , $pointers );	}}?>