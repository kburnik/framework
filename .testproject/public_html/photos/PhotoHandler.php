<?phpinclude_once( dirname(__FILE__) . '/../../project-settings.php');// print_r($_REQUEST);$p = parse_url($_GET['path']);$path = reset( explode('?',$_GET['path']));$parts = explode('/',$path);switch ($parts[0]) {  case 'thumbs':    $basenamePrefix = "tmb.";    $method = 'enboxImage';    $params = array(70,70);    array_shift($parts);    $applyWatermark = false;  break;  case 'subs':    $basenamePrefix = "sub.";    $method = 'restrictImage';    $params = array(400,400);    array_shift($parts);    $applyWatermark = true;  break;  default:    if (preg_match('/([0-9]+)(x|y)([0-9]+)/',$parts[0],$results)) {      $mode = $results[0];      $basenamePrefix = $mode.".";      array_shift($results);      list($w,$m,$h) = $results;      $method = ($m=='x') ? 'enboxImage' : 'restrictImage';      $params = array($w,$h);      array_shift($parts);    } else {      $basenamePrefix = "";    }    $applyWatermark = true;  break;}$originalImagePath =  implode('/',$parts);// if no imageif (!file_exists($originalImagePath) || !is_file($originalImagePath) ) {  header('HTTP/1.0 404 Not Found');  $originalImagePath = dirname(__FILE__).'/default.png';  $parts = array( 'default.png' );}$c = count($parts);$parts[$c-1] = $basenamePrefix.$parts[$c-1];$cachedImagePath = 'cache/' . implode('/',$parts);// echo $cachedImagePath;$cachedImageDirectory = dirname($cachedImagePath);$originalImagePath = realpath( $originalImagePath  );if (!file_exists($cachedImagePath)) {  // echo "No cache\n";  include_once( $PATH_TO_FRAMEWORK . "/base/Base.php" );  // echo "including: " . realpath( dirname(__FILE__).'/../../../../framework/base/Base.php') );  if (!file_exists($cachedImageDirectory)) {    mkdir($cachedImageDirectory,0755,true);  }  // echo "mkdir done\n";  // echo "\$imageProc = new ImageProcessor( $originalImagePath )";  $imageProc = new ImageProcessor( $originalImagePath );  // echo "image method $method getting called\n";  if (isset($method)) {    call_user_func_array(array($imageProc,$method),$params);  }  $imageProc->save( $cachedImagePath );  $imageProc->destroy();  $isCached = 'NO';} else {  $isCached = 'YES';}// echo $cachedImagePath;// die();header('X-Image-Cached:'. $isCached);header('Content-Type:image/jpeg');if ($isCached) {  header("Cache-Control: private, max-age=10800, pre-check=10800");  header("Pragma: private");  header("Expires: " . date(DATE_RFC822,strtotime(" 2 day")));}@readfile($cachedImagePath);
